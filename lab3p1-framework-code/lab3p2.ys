	.pos 0 
init:	irmovl Stack, %esp  	# Set up stack pointer  
	irmovl Stack, %ebp  	# Set up base pointer   
	call Main		# Execute main program
	halt			# Terminate program 

.align 4
Input: .long 0x5
       .long 0xc
       .long 0x3
Done:  .long 0xFFFFFFFF

Main:
	leal	4(%esp), %ecx
	andl	$-16, %esp
	pushl	-4(%ecx)#需修改
	pushl %ebp 
	rrmovl %esp,%ebp
    andl	$-16, %esp
	subl	$36, %esp#需修改
    irmovl  $2, %esi
	rmmovl	%esi, -36(%esp)
	irmovl  $4, %esi
	rmmovl	%esi, -32(%esp)
	irmovl  $5, %esi
	rmmovl	%esi, -28(%esp)
	irmovl  $3, %esi
	rmmovl	%esi, -24(%esp)
	irmovl  $6, %esi
	rmmovl	%esi, -20(%esp)
	irmovl  $2, %esi
	rmmovl	%esi, -16(%esp)
	irmovl  $3, %esi
	rmmovl	%esi, -12(%esp)
    subl	$8, %esp
	pushl	-12(%ebp)
	leal	-36(%ebp), %eax
	pushl	%eax
	call	_get_pair
    addl	$16, %esp#修
	nop
    movl	-4(%ebp), %ecx#修
	rrmovl %ebp, %esp
    popl %ebp
    leal	-4(%ecx), %esp#修
	ret
	.globl	_get_pair
	.def	_get_pair;	.scl	2;	.type	32;	.endef
_get_pair:
	pushl	%ebp
	rrmovl	%esp, %ebp
    irmovl  $40, %esi 
	subl    %esi, %esp
	irmovl  $1, %esi
	rmmovl	%esi, -12(%esp)
	jmp	L3
L4:
	mrmovl	8(%ebp), %eax
	irmovl	$4, %esi
	rrmovl  %esi, %eax
	mrmovl	(%eax), %edx
	mrmovl	8(%ebp), %eax
	mrmovl	(%eax), %eax
	rmmovl	%edx, 4(%esp)
	rmmovl	%eax, (%esp)
	call	_raise2pwr
	rmmovl	%eax, -16(%ebp)
    irmovl	$8, %esi
	rrmovl  %esi, 8(%ebp)
    irmovl	$1, %esi
	rrmovl  %esi, -12(%ebp)
L3:
	mrmovl	-12(%ebp), %eax
    mrmovl  12(%ebp), %esi
	rrmovl  %eax, %edi
	subl    %esi, %edi
	jne	L4
	nop
	nop
	rrmovl  %ebp,%esp
	popl    %ebp
	ret
	.globl	_raise2pwr
	.def	_raise2pwr;	.scl	2;	.type	32;	.endef
_raise2pwr:
	pushl	%ebp
	rrmovl	%esp, %ebp
    irmovl  $40, %esi
	subl	%esi, %esp
	immovl	$1, -16(%ebp)
	immovl	$1, -12(%ebp)
	jmp	L6
L7:
	mrmovl	8(%ebp), %eax
	immovl	%eax, 4(%esp)
	mrmovl	-16(%ebp), %eax
	rrmovl	%eax, (%esp)
	call	_mul_op
	immovl	%eax, -16(%ebp)
	irmovl	$1, %esi
	rrmovl  %esi, -12(%ebp)
L6:#我写到这了
	mrmovl	-12(%ebp), %eax
	mrmovl  12(%ebp), %esi
	rrmovl  %eax, %edi
	subl    %esi, %edi
	jne	L7
	mrmovl	-16(%ebp), %eax
	rrmovl %ebp, %esp
    popl %ebp
	ret
	.globl	_mul_op
	.def	_mul_op;	.scl	2;	.type	32;	.endef
_mul_op:
	pushl	%ebp
	rrmovl	%esp, %ebp
	mrmovl	8(%ebp), %eax
	imull	12(%ebp), %eax

	rrmovl %ebp,%esp
	popl %ebp
	ret 

# The stack starts here and grows to lower addresses
	.pos 0x1000		
Stack:	 